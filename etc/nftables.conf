#!/usr/sbin/nft -f

flush ruleset

table inet filter {

#add permanent ban also

include "wapp3.nft"

	set limit1 {
	type ipv4_addr;
	flags dynamic, timeout;
	timeout 5m;
	}

#	set limit2 {
#	type ipv4_addr;
#	flags dynamic, timeout;
#	timeout 2m;
#	}

	set limit3 {
	type ipv6_addr;
	flags dynamic, timeout;
	timeout 5m;
	}

	set limit4 {
	type ipv6_addr;
	flags dynamic, timeout;
	timeout 10m;
	}

	set limit5 {
	type ipv4_addr;
	flags dynamic;
	}

#baloo1 has a 10 minute timeout, until permanent exceptions for local dev testing environment added
include "baloo1.nft"
include "geoip3.nft"


#53 for wapp dns resolution, 270717 mdb 
#pointless adding iifname to ingress rules, localhost packets dont pass through ingress chain I believe
	chain ingress {
		type filter hook ingress device ens4 priority 0; policy drop;
		counter;

#		tcp dport 5510 counter accept

		tcp dport 5322 counter accept;

#		tcp sport {80,443} counter drop;

		ip saddr @blist1 counter drop;

		ip saddr @water1 tcp sport {443,80} counter accept;
#		ip saddr @water1 counter accept;

#mac add never shared by ipv4 protocol
#		ether saddr fc:e2:6c:28:38:c6 counter accept;

#add iifname ens4 :-)
		iifname ens4 tcp dport 5500 ip saddr @geoip4 counter accept;
		iifname ens4 tcp dport 5500 ip6 saddr @geoip6 counter accept;
#		tcp dport 5500 counter accept

#IMP BELOW :-)
#		iifname ens4 tcp sport 27017 counter accept; #for managed mdb instance :-0
#		iifname ens4 tcp dport 27017 counter accept; #when i connect remotely to mdb run locally

		iifname ens4 meta l4proto {tcp,udp} th sport 53 counter accept;


	}

	chain input {
		type filter hook input priority 0; policy drop;

		counter;
#		tcp dport 5510 counter accept

		tcp dport 5322 ct state {new,established, related} counter accept;

#		tcp sport {80,443} counter drop;

#safer to add to immediate blocklist, rather than doing below, which lets existing malcious connections continue, also dont know if all new connections 
#blocked or just new connections from an ip already having below limit of connections get blocked
#		tcp dport 5500 ip saddr ct count 20 accept; 
#add overall limit for number of open conns, because it wasnt working in conjunction with remaining 5500 port rules. 
#		ip saddr ct count > 20} reject;
#right below better		tcp dport 5500 ct state {new, established, related} limit rate over 50/second counter drop;
		tcp dport 5500 ct state new add @limit5 {ip saddr limit rate 10/second} accept;
		tcp dport 5500 ct state new counter limit rate 5000/hour accept; #global and per ip limits :-)

#		tcp dport 5500 ct state new add @limit2 {ip saddr ct count over 200} counter drop; 
#ct count over 200 add @limit2 counter;;
#		ct state {new, established, related} ct count over 10 {ip saddr add @limit2}
#{ip saddr add @limit2} drop;

#		ip saddr @limit2 counter drop
		ip6 saddr @limit4 counter drop
		ip saddr @limit1 counter drop
		ip6 saddr @limit3 counter drop;

#		ether saddr fc:e2:6c:28:38:c6 accept;

#		tcp dport 5322 ct state new ct count 5 add @limit1 { ip saddr limit rate 200000 bytes/hour } counter accept;

#		tcp dport 5322 ct state new ct count 5 add @limit3 { ip6 saddr limit rate 2000000 bytes/hour } counter accept;

#limit is 50 mb a minute

#		tcp dport 5500 add @limit2 { ip saddr ct count over 20 } reject;

#		tcp dport 5500 ip saddr @geoip4 ct state { established, related } { ct count 20 add @limit2 } counter;
#SAFE AND WORKS. users uploading images, hence 50 mb a minute
		tcp dport 5500 ip saddr @geoip4 ct state { new, established, related } limit rate 50000000 bytes/minute counter accept;
		tcp dport 5500 ip6 saddr @geoip6 ct state { new, established, related } limit rate 50000000 bytes/minute counter accept

#		tcp dport 5500 ip saddr @geoip4 ct state { new, established, related } limit rate 50000000 bytes/minute {ip saddr add@limit2} accept;
#		{ ip saddr limit rate over 50/minute } counter accept;
#		{ ip saddr limit rate 50000000 bytes/minute } counter accept;    #need higher limit here, because same browser tab can initiate multiple new connections,    existing one closed after ten-fifteen seconds apparently.
#		ct count 20
#		add @limit2
#		tcp dport 5500 ip6 saddr @geoip6 ct state new ct count 20 add @limit4 { ip6 saddr limit rate 50000000 bytes/minute } counter accept;
#		tcp dport 5500 ip saddr @geoip4 ct state new,established,related ct count over 20000000 add @limit2 { ip saddr limit rate 50000000 bytes/minute } counter accept; 
#		tcp dport 5500 ip6 saddr @geoip6 ct state established,related ct count 20 add @limit4 { ip6 saddr limit rate 50000000 bytes/minute } counter accept;


		iifname lo tcp dport 27017 counter accept;
		iifname lo tcp sport 27017 counter accept;
		iifname lo tcp dport 27018 counter accept;
		iifname lo tcp sport 27018 counter accept;
		# iifname lo tcp dport 27019 counter accept;
		# iifname lo tcp sport 27019 counter accept;

#		iifname ens4 tcp dport 27017 counter accept; #for managed mdb, and remote connections to local mdb
#		tcp sport 27017 counter accept #for managed mdb and remote connections to local mdb

		ip saddr @water1 tcp sport {443,80} counter accept;
#		ip saddr @water1 counter accept; #not needed, too lose a rule, wapp works with sport restrictions also :-)


		iifname ens4 meta l4proto {tcp,udp} th sport 53 counter accept;
		meta l4proto {tcp,udp} th sport 53 counter accept;

		icmp type {0,8,3,4,5,9,10,11,12,13,14,15,16,17,18} counter drop;
		icmpv6 type {0,8,3,4,5,9,10,11,12,13,14,15,16,17,18} counter drop;
		tcp flags ack counter limit rate 2500/hour accept;
		tcp flags syn counter limit rate 2500/hour accept;
		meta l4proto icmp counter drop;
		ip protocol icmp counter drop;
#UNSURE IMPACT		ct state new tcp flags != syn counter drop;		

	}
	chain forward {
		type filter hook forward priority 0;
	}
	chain output {
		type filter hook output priority 0; policy drop;

		counter;

		tcp sport 5322 ct state {established, related} counter accept;
#		tcp sport 5510 counter accept

#		tcp dport {80,443} counter drop;

		tcp sport 5500 ct state new counter drop; #cant initiate new connection to any ip address on 5500. :-)
#		ether daddr fc:e2:6c:28:38:c6 accept;

		tcp sport 5500 ip daddr @geoip4 ct state {established, related} limit rate 50000000 bytes/minute counter accept;
		tcp sport 5500 ip6 daddr @geoip6 ct state {established, related} limit rate 50000000 bytes/minute counter accept;

#		oifname ens4 tcp sport 27017 counter accept; #for remote connections to this localhost mdb instance.
#		tcp dport 27017 counter accept;
		oifname lo tcp sport 27017 counter accept;
		oifname lo tcp dport 27017 counter accept;
		oifname lo tcp sport 27018 counter accept;
		oifname lo tcp dport 27018 counter accept;
		# oifname lo tcp sport 27019 counter accept;
		# oifname lo tcp dport 27019 counter accept;

#		tcp sport 27017 counter accept;

		ip daddr @water1 tcp dport {443,80} counter accept;
#		ip daddr @water1 counter accept;

#check which rule is better :-)
		oifname ens4 meta l4proto {tcp,udp} th dport 53 counter accept;
		meta l4proto {tcp,udp} th dport 53 counter accept;

		oifname lo counter accept;

		tcp flags syn&ack counter limit rate 2500/hour accept; #does this affect perform, load testing?
		
	}
}
